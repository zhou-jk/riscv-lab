package cpu.defines

import chisel3._
import chisel3.util._

object BRUOpType {
  def jal  = "b1000".U
  def jalr = "b1010".U
  def beq  = "b0000".U
  def bne  = "b0001".U
  def blt  = "b0100".U
  def bge  = "b0101".U
  def bltu = "b0110".U
  def bgeu = "b0111".U
  
  def isBranch(func: UInt) = !func(3)
  def isJump(func: UInt) = !isBranch(func)
}

object RVBranchInstr extends HasInstrType {
  def BEQ  = BitPat("b???????_?????_?????_000_?????_1100011")
  def BNE  = BitPat("b???????_?????_?????_001_?????_1100011")
  def BLT  = BitPat("b???????_?????_?????_100_?????_1100011")
  def BGE  = BitPat("b???????_?????_?????_101_?????_1100011")
  def BLTU = BitPat("b???????_?????_?????_110_?????_1100011")
  def BGEU = BitPat("b???????_?????_?????_111_?????_1100011")
  def JAL  = BitPat("b???????_???????_????_?????_1101111")
  def JALR = BitPat("b???????_?????_?????_000_?????_1100111")

  val table = Array(
    BEQ  -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.beq),
    BNE  -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.bne),
    BLT  -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.blt),
    BGE  -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.bge),
    BLTU -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.bltu),
    BGEU -> List(InstrB, FuType.bru, 0.U(1.W) ## BRUOpType.bgeu),
    JAL  -> List(InstrJ, FuType.bru, 0.U(1.W) ## BRUOpType.jal),
    JALR -> List(InstrI, FuType.bru, 0.U(1.W) ## BRUOpType.jalr)
  )
}