package cpu.defines

import chisel3._
import chisel3.util._

object RV32I_ALUInstr extends HasInstrType with CoreParameter {
  def ADDI = BitPat("b????????????_?????_000_?????_0010011")
  def SLLI = if (XLEN == 32) BitPat("b0000000?????_?????_001_?????_0010011")
  else BitPat("b000000??????_?????_001_?????_0010011")
  def SLTI  = BitPat("b????????????_?????_010_?????_0010011")
  def SLTIU = BitPat("b????????????_?????_011_?????_0010011")
  def XORI  = BitPat("b????????????_?????_100_?????_0010011")
  def SRLI = if (XLEN == 32) BitPat("b0000000?????_?????_101_?????_0010011")
  else BitPat("b000000??????_?????_101_?????_0010011")
  def ORI  = BitPat("b????????????_?????_110_?????_0010011")
  def ANDI = BitPat("b????????????_?????_111_?????_0010011")
  def SRAI = if (XLEN == 32) BitPat("b0100000?????_?????_101_?????_0010011")
  else BitPat("b010000??????_?????_101_?????_0010011")

  def ADD  = BitPat("b0000000_?????_?????_000_?????_0110011")
  def SLL  = BitPat("b0000000_?????_?????_001_?????_0110011")
  def SLT  = BitPat("b0000000_?????_?????_010_?????_0110011")
  def SLTU = BitPat("b0000000_?????_?????_011_?????_0110011")
  def XOR  = BitPat("b0000000_?????_?????_100_?????_0110011")
  def SRL  = BitPat("b0000000_?????_?????_101_?????_0110011")
  def OR   = BitPat("b0000000_?????_?????_110_?????_0110011")
  def AND  = BitPat("b0000000_?????_?????_111_?????_0110011")
  def SUB  = BitPat("b0100000_?????_?????_000_?????_0110011")
  def SRA  = BitPat("b0100000_?????_?????_101_?????_0110011")

  def AUIPC = BitPat("b????????????????????_?????_0010111")
  def LUI   = BitPat("b????????????????????_?????_0110111")

  // 在Decoder模块中搭配ListLookup函数使用
  val table = Array(
    // ADD指令将被解析为InstrR类型的指令，功能单元类型为alu，功能单元操作类型为add
    // R型指令
    ADD  -> List(InstrR, FuType.alu, ALUOpType.add),
    SUB  -> List(InstrR, FuType.alu, ALUOpType.sub),
    SLL  -> List(InstrR, FuType.alu, ALUOpType.sll),
    SLT  -> List(InstrR, FuType.alu, ALUOpType.slt),
    SLTU -> List(InstrR, FuType.alu, ALUOpType.sltu),
    XOR  -> List(InstrR, FuType.alu, ALUOpType.xor),
    SRL  -> List(InstrR, FuType.alu, ALUOpType.srl),
    SRA  -> List(InstrR, FuType.alu, ALUOpType.sra),
    OR   -> List(InstrR, FuType.alu, ALUOpType.or),
    AND  -> List(InstrR, FuType.alu, ALUOpType.and),
    
  )
}

object RV64IInstr extends HasInstrType {
  def ADDIW = BitPat("b???????_?????_?????_000_?????_0011011")
  def SLLIW = BitPat("b0000000_?????_?????_001_?????_0011011")
  def SRLIW = BitPat("b0000000_?????_?????_101_?????_0011011")
  def SRAIW = BitPat("b0100000_?????_?????_101_?????_0011011")
  def SLLW  = BitPat("b0000000_?????_?????_001_?????_0111011")
  def SRLW  = BitPat("b0000000_?????_?????_101_?????_0111011")
  def SRAW  = BitPat("b0100000_?????_?????_101_?????_0111011")
  def ADDW  = BitPat("b0000000_?????_?????_000_?????_0111011")
  def SUBW  = BitPat("b0100000_?????_?????_000_?????_0111011")

  val table = Array(
    // R型指令
    ADDW  -> List(InstrR, FuType.alu, ALUOpType.addw),
    SUBW  -> List(InstrR, FuType.alu, ALUOpType.subw),
    SLLW  -> List(InstrR, FuType.alu, ALUOpType.sllw),
    SRLW  -> List(InstrR, FuType.alu, ALUOpType.srlw),
    SRAW  -> List(InstrR, FuType.alu, ALUOpType.sraw),
  )
}

object RVIInstr extends CoreParameter {
  val table = RV32I_ALUInstr.table ++
    (if (XLEN == 64) RV64IInstr.table else Array.empty)
}
